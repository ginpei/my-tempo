rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId} {
      // match /{allPaths=**} {
      // }

      match /photo {
        allow read: if true;
        allow write: if isAuthUid(userId) && isImageMb(request.resource, 5);
        allow delete: if isAuthUid(userId);
      }
    }

    match /posts/{postId}/{imageId} {
        allow read: if isPublic(resource);
        allow create: if
          isAuthUid(request.resource.metadata['userId']) &&
          isImageMb(request.resource, 5) &&
          (imageId == '1' || imageId == '2' || imageId == '3' || imageId == '4');
    }

    function isAuthUid(uid) {
      return request.auth.uid == uid;
    }

    function isPublic(res) {
      return res.metadata['visibility'] == 'public';
    }

    function isImageMb(res, mb) {
      return isImage(res) && isLtMb(res, mb);
    }

    // is the request file size less than in MB
    function isLtMb(res, mb) {
      return res.size < mb * 1024 * 1024;
    }

    function isImage(res) {
      return res.contentType.matches('image/.*');
    }
  }
}
